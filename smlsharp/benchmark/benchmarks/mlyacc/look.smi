_require "basis.smi"
_require "base.sig"
_require "lrtable.smi"
_require "utils.smi"
_require "utils.sig"
_require "sigs.sml"

functor mkLook (
  A : sig
    structure IntGrammar : sig
      structure Grammar : sig
        datatype term = T of int
        datatype nonterm = NT of int
        datatype symbol = TERM of term | NONTERM of nonterm
        datatype grammar =
            GRAMMAR of {rules: {lhs : nonterm, rhs : symbol list,
                                precedence : int option, rulenum : int} list,
                        terms: int,
                        nonterms: int,
                        start : nonterm,
                        eop : term list,
                        noshift : term list,
                        precedence : term -> int option,
                        termToString : term -> string,
                        nontermToString : nonterm -> string} 
      end
      structure SymbolAssoc : sig
        type 'a table
        type key
        val size : 'a table -> int
        val empty: 'a table
        val exists: (key * 'a table) -> bool
        val find : (key * 'a table)  ->  'a option
        val insert: ((key * 'a) * 'a table) -> 'a table
        val make_table : (key * 'a ) list -> 'a table
        val make_list : 'a table -> (key * 'a) list
        val fold : ((key * 'a) * 'b -> 'b) -> 'a table -> 'b -> 'b
      end
      structure NontermAssoc : sig
        type 'a table
        type key
        val size : 'a table -> int
        val empty: 'a table
        val exists: (key * 'a table) -> bool
        val find : (key * 'a table)  ->  'a option
        val insert: ((key * 'a) * 'a table) -> 'a table
        val make_table : (key * 'a ) list -> 'a table
        val make_list : 'a table -> (key * 'a) list
        val fold : ((key * 'a) * 'b -> 'b) -> 'a table -> 'b -> 'b
      end
      sharing type SymbolAssoc.key = Grammar.symbol
      sharing type NontermAssoc.key = Grammar.nonterm
      datatype rule = RULE of {lhs : Grammar.nonterm,
                               rhs : Grammar.symbol list,
                               num : int,        
                               rulenum : int,
                               precedence : int option}
      val gtTerm : Grammar.term * Grammar.term -> bool
      val eqTerm : Grammar.term * Grammar.term -> bool
      val gtNonterm : Grammar.nonterm * Grammar.nonterm -> bool
      val eqNonterm : Grammar.nonterm * Grammar.nonterm -> bool
      val gtSymbol : Grammar.symbol * Grammar.symbol -> bool
      val eqSymbol : Grammar.symbol * Grammar.symbol -> bool
      val DEBUG : bool
      val prRule : (Grammar.symbol -> string) * (Grammar.nonterm -> string) *
                   (string -> 'b) -> rule -> unit
      val prGrammar : (Grammar.symbol -> string)*(Grammar.nonterm -> string) *
                      (string -> unit) -> Grammar.grammar -> unit
    end
  end
) =
struct
  structure Grammar =
  struct
    datatype term = datatype A.IntGrammar.Grammar.term
    datatype nonterm = datatype A.IntGrammar.Grammar.nonterm
    datatype symbol = datatype A.IntGrammar.Grammar.symbol
    datatype grammar = datatype A.IntGrammar.Grammar.grammar
  end
  structure IntGrammar =
  struct
    structure Grammar =
    struct
      datatype term = datatype A.IntGrammar.Grammar.term
      datatype nonterm = datatype A.IntGrammar.Grammar.nonterm
      datatype symbol = datatype A.IntGrammar.Grammar.symbol
      datatype grammar = datatype A.IntGrammar.Grammar.grammar
    end
    structure SymbolAssoc =
    struct
      type 'a table = 'a A.IntGrammar.SymbolAssoc.table
      type key = A.IntGrammar.SymbolAssoc.key
      val size : 'a table -> int
      val empty : 'a table
      val exists : key * 'a table -> bool
      val find : key * 'a table -> 'a option
      val insert : (key * 'a) * 'a table -> 'a table
      val make_table : (key * 'a) list -> 'a table
      val make_list : 'a table -> (key * 'a) list
      val fold : ((key * 'a) * 'b -> 'b) -> 'a table -> 'b -> 'b
    end
    structure NontermAssoc =
    struct
      type 'a table = 'a A.IntGrammar.NontermAssoc.table
      type key = A.IntGrammar.NontermAssoc.key
      val size : 'a table -> int
      val empty : 'a table
      val exists : key * 'a table -> bool
      val find : key * 'a table -> 'a option
      val insert : (key * 'a) * 'a table -> 'a table
      val make_table : (key * 'a) list -> 'a table
      val make_list : 'a table -> (key * 'a) list
      val fold : ((key * 'a) * 'b -> 'b) -> 'a table -> 'b -> 'b
    end
    datatype rule = datatype A.IntGrammar.rule
    val gtTerm : Grammar.term * Grammar.term -> bool
    val eqTerm : Grammar.term * Grammar.term -> bool
    val gtNonterm : Grammar.nonterm * Grammar.nonterm -> bool
    val eqNonterm : Grammar.nonterm * Grammar.nonterm -> bool
    val gtSymbol : Grammar.symbol * Grammar.symbol -> bool
    val eqSymbol : Grammar.symbol * Grammar.symbol -> bool
    val DEBUG : bool
    val prRule : (Grammar.symbol -> string) * (Grammar.nonterm -> string) *
                 (string -> 'b) -> rule -> unit
    val prGrammar : (Grammar.symbol -> string) * (Grammar.nonterm -> string) *
                    (string -> unit) -> Grammar.grammar -> unit
  end
  val union : Grammar.term list * Grammar.term list -> Grammar.term list
  val make_set : Grammar.term list -> Grammar.term list
  val mkFuncs : {rules : IntGrammar.rule list, nonterms : int,
                 produces : Grammar.nonterm -> IntGrammar.rule list} ->
                {nullable: Grammar.nonterm -> bool,
                 first : Grammar.symbol list -> Grammar.term list}
  val prLook : (Grammar.term -> string) * (string -> unit) -> 
               Grammar.term list -> unit
end
