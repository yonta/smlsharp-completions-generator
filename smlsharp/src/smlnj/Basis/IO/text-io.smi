_require local "../../../basis/main/CharArray.smi"
_require local "../../../basis/main/CharVector.smi"
_require local "../../../basis/main/CharArraySlice.smi"
_require local "../../../basis/main/CharVectorSlice.smi"
(* _require local "../../../basis/main/Substring.smi" *)
_require "../../../basis/main/IO.smi"
_require local "../../../basis/main/OS.smi"
_require local "../../../basis/main/Option.smi"
_require "../../../basis/main/StringCvt.smi"
_require "../../../basis/main/Substring.smi"
_require local "../../../basis/main/SMLSharp_OSProcess.smi"
_require "../IO/prim-io-text.smi"
_require local "../Unix/posix-text-prim-io.smi"

structure TextIO =
struct
  structure StreamIO =
  struct
    type elem = char
    type vector = string
    type instream (= boxed)
    type outstream (= boxed)
    type out_pos (= boxed)
    type reader = TextPrimIO.reader
    type writer = TextPrimIO.writer
    type pos = TextPrimIO.pos
    val input : instream -> vector * instream
    val input1 : instream -> (elem * instream) option
    val inputN : instream * int -> vector * instream
    val inputAll : instream -> vector * instream
    val canInput : instream * int -> int option
    val closeIn : instream -> unit
    val endOfStream : instream -> bool
    val output : outstream * vector -> unit
    val output1 : outstream * elem -> unit
    val flushOut : outstream -> unit
    val closeOut : outstream -> unit
    val mkInstream : reader * vector -> instream
    val getReader : instream -> reader * vector
    val filePosIn : instream -> pos
    val setBufferMode : outstream * IO.buffer_mode -> unit
    val getBufferMode : outstream -> IO.buffer_mode
    val mkOutstream : writer * IO.buffer_mode -> outstream
    val getWriter : outstream -> writer * IO.buffer_mode
    val getPosOut : outstream -> out_pos
    val setPosOut : out_pos -> outstream
    val filePosOut : out_pos -> pos
    val inputLine : instream -> (string * instream) option
    val outputSubstr : outstream * Substring.substring -> unit
  end
  type vector = StreamIO.vector
  type elem = StreamIO.elem
  type instream (= ref)
  type outstream (= ref)
  val input : instream -> vector
  val input1 : instream -> elem option
  val inputN : instream * int -> vector
  val inputAll : instream -> vector
  val canInput : instream * int -> int option
  val lookahead : instream -> elem option
  val closeIn : instream -> unit
  val endOfStream : instream -> bool
  val output : outstream * vector -> unit
  val output1 : outstream * elem -> unit
  val flushOut : outstream -> unit
  val closeOut : outstream -> unit
  val mkInstream : StreamIO.instream -> instream
  val getInstream : instream -> StreamIO.instream
  val setInstream : instream * StreamIO.instream -> unit
  val mkOutstream : StreamIO.outstream -> outstream
  val getOutstream : outstream -> StreamIO.outstream
  val setOutstream : outstream * StreamIO.outstream -> unit
  val getPosOut : outstream -> StreamIO.out_pos
  val setPosOut : outstream * StreamIO.out_pos -> unit

  val inputLine : instream -> string option
  val outputSubstr : outstream * Substring.substring -> unit
  val openIn : string -> instream
  val openOut : string -> outstream
  val openAppend : string -> outstream
  val openString : string -> instream
  val stdIn : instream
  val stdOut : outstream
  val stdErr : outstream
  val print : string -> unit
  val scanStream : ((char, StreamIO.instream) StringCvt.reader
                    -> ('a, StreamIO.instream) StringCvt.reader)
                   -> instream
                   -> 'a option
end
